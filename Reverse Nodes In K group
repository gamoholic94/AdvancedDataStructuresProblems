class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

class Solution:
    def reverseKGroup(self, head: ListNode, k: int) -> ListNode:
        def has_k_nodes(node, k):
            count = 0
            while node and count < k:
                node = node.next
                count += 1
            return count == k

        def reverse_k_nodes(start, k):
            prev = None
            curr = start
            for _ in range(k):
                nxt = curr.next
                curr.next = prev
                prev = curr
                curr = nxt
            return prev, start, curr 

        dummy = ListNode(0)
        dummy.next = head
        group_prev = dummy

        while has_k_nodes(group_prev.next, k):
            group_start = group_prev.next
            new_head, new_tail, next_group = reverse_k_nodes(group_start, k)
            group_prev.next = new_head
            new_tail.next = next_group
            group_prev = new_tail

        return dummy.next
